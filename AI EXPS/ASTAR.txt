def aStarAlgo(start_node,stop_node):
    open_set=set(start_node)
    closed_set=set()
    g={}
    parents={}
    g[start_node]=0
    parents[start_node]=start_node
    counter=0
    print(f'\nIteration number {counter} : ')
    print(f'Open : ',open_set)
    print(f'Closed : ',closed_set)
    while len(open_set)>0:
        n=None
        for v in open_set:
            if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n=v
            print(f'{v} --> {g[v] + heuristic(v)}')
            pathCost=g[v]+heuristic(v)
        if n == stop_node or Graph_nodes[n]==None:
            pass
        else:
            for (m, weight) in get_neighbors(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m]> g[n] + weight:
                        g[m] = g[n] + weight 
                        parents[m] = n
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)
        if n == None:
            print('Path does not exist!') 
            return None

        if n == stop_node:
            path = []

            while parents[n]!= n:
                path.append(n) 
                n = parents[n]
            path.append(start_node)
            path.reverse()
            counter = counter + 1
            print(f'\nIteration {counter}') 
            print('Path found: {}'.format(path))
            print('Path Cost: {} \n\n'.format(pathCost))
            return path
        open_set.remove(n)
        closed_set.add(n)
        counter = counter + 1
        print(f'\nlteration {counter} :')
        print(f'Open : ',open_set)
        print(f'Close : ', closed_set) 
    print("Path does not exist!")
    return None

def get_neighbors(v):
    if v in Graph_nodes: 
        return Graph_nodes[v] 
    else:
        return None

def heuristic(n):
    H_dist = {
        'A': 18,
        'B': 12,
        'C': 12,
        'D': 7, 
        'E': 4,
        'F': 9,
        'T': 12,
        'J': 6,
        'G': 0,
    } 
    return H_dist[n]
Graph_nodes={
    'A':[('B',5),('C',10)],
    'B':[('D',7),('I',3)],
    'C':[('D',3)],
    'D':[('E',6)],
    'E':[('G',2)],
    'F':[('D',6),('J',3)],
    'I':[('F',3)],
    'J':[('G',8)],
    'G':None
}
aStarAlgo('A','G')